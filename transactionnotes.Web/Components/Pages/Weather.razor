@page "/weather"

@using Microsoft.AspNetCore.Authorization
@using transactionnotes.Web.Services
@using transactionnotes.Web.Components.Shared

@inject ErrorHandlingService ErrorHandler
@attribute [Authorize]

@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject WeatherApiClient WeatherApi
@inject ErrorHandlingService ErrorHandlingService

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data loaded from a backend API service.</p>

<LoadingOrError TData="WeatherForecast[]"
                IsLoading="forecasts == null && errorMessage == null"
                ErrorMessage="@errorMessage"
                Data="forecasts">
    <ChildContent Context="data">
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th aria-label="Temperature in Celsius">Temp. (C)</th>
                    <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @if (data != null)
                {
                    foreach (var forecast in data)
                    {
                        <tr>
                            <td>@forecast.Date.ToShortDateString()</td>
                            <td>@forecast.TemperatureC</td>
                            <td>@forecast.TemperatureF</td>
                            <td>@forecast.Summary</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </ChildContent>
</LoadingOrError>

@code {
    private WeatherForecast[]? forecasts;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            forecasts = await WeatherApi.GetWeatherAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading weather data: {ex.Message}";
        }
    }
}

@* @code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await WeatherApi.GetWeatherAsync();
    }
} *@
